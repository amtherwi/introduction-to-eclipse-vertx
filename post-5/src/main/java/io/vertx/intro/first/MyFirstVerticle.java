package io.vertx.intro.first;

import io.reactivex.Completable;
import io.reactivex.Single;
import io.vertx.core.Future;
import io.vertx.core.json.JsonArray;
import io.vertx.core.json.JsonObject;
import io.vertx.ext.sql.SQLOptions;
import io.vertx.reactivex.CompletableHelper;
import io.vertx.reactivex.config.ConfigRetriever;
import io.vertx.reactivex.core.AbstractVerticle;
import io.vertx.reactivex.core.buffer.Buffer;
import io.vertx.reactivex.core.http.HttpServerResponse;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLConnection;
import io.vertx.reactivex.ext.web.Router;
import io.vertx.reactivex.ext.web.RoutingContext;
import io.vertx.reactivex.ext.web.handler.BodyHandler;
import io.vertx.reactivex.ext.web.handler.StaticHandler;

import java.util.List;
import java.util.NoSuchElementException;
import java.util.stream.Collectors;

import static io.vertx.intro.first.ActionHelper.*;

public class MyFirstVerticle extends AbstractVerticle {

    private JDBCClient jdbc;

    @Override
    public void start(Future<Void> fut) {

        // Create a router object.
        Router router = Router.router(vertx);

        // Bind "/" to our hello message - so we are still compatible.
        router.route("/").handler(routingContext -> {
            HttpServerResponse response = routingContext.response();
            response
                .putHeader("content-type", "text/html")
                .end("<h1>Hello from my first Vert.x 3 application</h1>");
        });

        // Serve static resources from the /assets directory
        router.route("/assets/*").handler(StaticHandler.create("assets"));
        router.get("/api/articles").handler(this::getAll);
        router.get("/api/articles/:id").handler(this::getOne);
        router.route("/api/articles*").handler(BodyHandler.create());
        router.post("/api/articles").handler(this::addOne);
        router.delete("/api/articles/:id").handler(this::deleteOne);
        router.put("/api/articles/:id").handler(this::updateOne);

        ConfigRetriever retriever = ConfigRetriever.create(vertx);

        // Start sequence:
        // 1 - Retrieve the configuration
        //      |- 2 - Create the JDBC client
        //      |- 3 - Connect to the database (retrieve a connection)
        //              |- 4 - Create table if needed
        //                   |- 5 - Add some data if needed
        //                          |- 6 - Close connection when done
        //              |- 7 - Start HTTP server
        //      |- 9 - we are done!

        retriever.rxGetConfig()
            .doOnSuccess(config ->
                jdbc = JDBCClient.createShared(vertx, config, "My-Reading-List"))
            .flatMap(config ->
                connect()
                    .flatMap(connection ->
                        this.createTableIfNeeded(connection)
                            .flatMap(this::createSomeDataIfNone)
                            .doAfterTerminate(connection::close)
                    )
                    .map(x -> config)
            )
            .flatMapCompletable(config -> createHttpServer(config, router))
            .subscribe(CompletableHelper.toObserver(fut));

    }

    private Completable createHttpServer(JsonObject config, Router router) {
        return vertx
            .createHttpServer()
            .requestHandler(router::accept)
            .rxListen(config.getInteger("HTTP_PORT", 8080))
            .toCompletable();
    }

    private Single<SQLConnection> connect() {
        return jdbc.rxGetConnection()
            .map(c -> c.setOptions(new SQLOptions().setAutoGeneratedKeys(true)));
    }

    private Single<Article> insert(SQLConnection connection, Article article, boolean closeConnection) {
        String sql = "INSERT INTO Articles (title, url) VALUES (?, ?)";
        return connection
            .rxUpdateWithParams(sql, new JsonArray().add(article.getTitle()).add(article.getUrl()))
            .map(res -> new Article(res.getKeys().getLong(0), article.getTitle(), article.getUrl()))
            .doFinally(() -> {
                if (closeConnection) {
                    connection.close();
                }
            });
    }

    private Single<List<Article>> query(SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM articles")
            .map(rs -> rs.getRows().stream().map(Article::new).collect(Collectors.toList()))
            .doFinally(connection::close);
    }

    private Single<Article> queryOne(SQLConnection connection, String id) {
        String sql = "SELECT * FROM articles WHERE id = ?";
        return connection.rxQueryWithParams(sql, new JsonArray().add(Integer.valueOf(id)))
            .doFinally(connection::close)
            .map(rs -> {
                List<JsonObject> rows = rs.getRows();
                if (rows.size() == 0) {
                    throw new NoSuchElementException("No article with id " + id);
                } else {
                    JsonObject row = rows.get(0);
                    return new Article(row);
                }
            });
    }

    private Completable update(SQLConnection connection, String id, Article article) {
        String sql = "UPDATE articles SET title = ?, url = ? WHERE id = ?";
        JsonArray params = new JsonArray().add(article.getTitle())
            .add(article.getUrl())
            .add(Integer.valueOf(id));
        return connection.rxUpdateWithParams(sql, params)
            .flatMapCompletable(ur ->
                ur.getUpdated() == 0 ?
                    Completable
                        .error(new NoSuchElementException("No article with id " + id))
                    : Completable.complete()
            )
            .doFinally(connection::close);
    }

    private Completable delete(SQLConnection connection, String id) {
        String sql = "DELETE FROM Articles WHERE id = ?";
        JsonArray params = new JsonArray().add(Integer.valueOf(id));
        return connection.rxUpdateWithParams(sql, params)
            .doFinally(connection::close)
            .flatMapCompletable(ur ->
                ur.getUpdated() == 0 ?
                    Completable
                        .error(new NoSuchElementException("No article with id " + id))
                    : Completable.complete()
            );
    }

    private Single<SQLConnection> createTableIfNeeded(SQLConnection connection) {
        return vertx.fileSystem().rxReadFile("tables.sql")
            .map(Buffer::toString)
            .flatMapCompletable(connection::rxExecute)
            .toSingleDefault(connection);
    }

    private Single<SQLConnection> createSomeDataIfNone(SQLConnection connection) {
        return connection.rxQuery("SELECT * FROM Articles")
            .flatMap(rs -> {
                if (rs.getResults().isEmpty()) {
                    Article article1 = new Article("Fallacies of distributed computing",
                        "https://en.wikipedia.org/wiki/Fallacies_of_distributed_computing");
                    Article article2 = new Article("Reactive Manifesto",
                        "https://www.reactivemanifesto.org/");
                    return Single.zip(
                        insert(connection, article1, false),
                        insert(connection, article2, false),
                        (a1, a2) -> connection
                    );
                } else {
                    return Single.just(connection);
                }
            });
    }


    // ---- HTTP Actions ----

    private void getAll(RoutingContext rc) {
        connect()
            .flatMap(this::query)
            .subscribe(ok(rc));
    }

    private void addOne(RoutingContext rc) {
        Article article = rc.getBodyAsJson().mapTo(Article.class);
        connect()
            .flatMap(connection -> insert(connection, article, true))
            .subscribe(created(rc));
    }


    private void deleteOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .flatMapCompletable(connection -> delete(connection, id))
            .subscribe(noContent(rc), onError(rc));
    }


    private void getOne(RoutingContext rc) {
        String id = rc.pathParam("id");
        connect()
            .flatMap(connection -> queryOne(connection, id))
            .subscribe(ok(rc));
    }

    private void updateOne(RoutingContext rc) {
        String id = rc.request().getParam("id");
        Article article = rc.getBodyAsJson().mapTo(Article.class);
        connect()
            .flatMapCompletable(connection -> update(connection, id, article))
            .subscribe(noContent(rc), onError(rc));
    }

}